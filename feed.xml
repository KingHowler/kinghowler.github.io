<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://kinghowler.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://kinghowler.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-25T06:32:32+00:00</updated><id>https://kinghowler.github.io/feed.xml</id><title type="html">M. Umar Shahbaz</title><subtitle>A website containing the full description of the academics, acheivements and projects of Muhammad Umar Shahbaz</subtitle><entry><title type="html">Basic Logic Gates and Truth Tables</title><link href="https://kinghowler.github.io/blog/2024/basic-logic-gates-and-truth-tables/" rel="alternate" type="text/html" title="Basic Logic Gates and Truth Tables"/><published>2024-08-25T00:00:00+00:00</published><updated>2024-08-25T00:00:00+00:00</updated><id>https://kinghowler.github.io/blog/2024/basic-logic-gates-and-truth-tables</id><content type="html" xml:base="https://kinghowler.github.io/blog/2024/basic-logic-gates-and-truth-tables/"><![CDATA[<style>th,td{border:1px solid black}</style> <p>For this lecture let’s start with the very basics.</p> <h4 id="what-is-digital-electronics">What is Digital Electronics?</h4> <p>It is the branch of physics which deals with logic signals and the electronic components that produce them. It includes usage of boolean algebra, logic circuits and ICs which have complex transistor logic implemented inside them. It is somewhat similar to Computer Engineering.</p> <hr/> <h2 id="truth-tables">Truth Tables</h2> <p>A truth table shows every single possible input combination and the respective outputs for each. For example, an AND Gate has the following Truth Table:</p> <table> <thead> <tr> <th>Input A</th> <th>Input B</th> <th>Output X</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>0</td> </tr> <tr> <td>1</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>1</td> <td>1</td> </tr> </tbody> </table> <blockquote> <p>Don’t worry I will be explaining what an AND gate is as well</p> </blockquote> <p>In digital electronics, 1 denotes “ON” while 0 denotes “OFF”</p> <blockquote> <p>The meaning of 1 and 0 will be described in more detail in <code class="language-plaintext highlighter-rouge">Lecture #2: Logic States, pull-up &amp; pull-down</code></p> </blockquote> <hr/> <h1 id="the-6-basic-logic-gates">The 6 Basic Logic gates</h1> <h2 id="and-gate">AND gate</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/dec/logic-gates/AND-480.webp 480w,/assets/img/dec/logic-gates/AND-800.webp 800w,/assets/img/dec/logic-gates/AND-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/dec/logic-gates/AND.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="AND" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <strong>AND</strong> gate has 2 inputs. When both of the inputs are set to 1, only then will the output also result in 1.</p> <p>The Truth Table for an <strong>AND</strong> gate is as follows:</p> <p>| Input A | Input B | Output X | | ——- | ——- | ——– | | 0 | 0 | 0 | | 0 | 1 | 0 | | 1 | 0 | 0 | | 1 | 1 | 1 | <br/><br/></p> <h2 id="not-gate">NOT gate</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/dec/logic-gates/NOT-480.webp 480w,/assets/img/dec/logic-gates/NOT-800.webp 800w,/assets/img/dec/logic-gates/NOT-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/dec/logic-gates/NOT.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="NOT" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <strong>NOT</strong> gate has 1 input. In it the output is always the exact opposite of the input</p> <p>The Truth Table for a <strong>NOT</strong> gate is as follows:</p> <p>| Input A | Output X | | ——- | ——– | | 0 | 1 | | 1 | 0 | <br/><br/></p> <h2 id="or-gate">OR gate</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/dec/logic-gates/OR-480.webp 480w,/assets/img/dec/logic-gates/OR-800.webp 800w,/assets/img/dec/logic-gates/OR-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/dec/logic-gates/OR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="OR" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <strong>OR</strong> gate has 2 inputs. If any of the inputs is 1, then the output also result in 1.</p> <p>The Truth Table for an <strong>OR</strong> gate is as follows:</p> <p>| Input A | Input B | Output X | | ——- | ——- | ——– | | 0 | 0 | 0 | | 0 | 1 | 1 | | 1 | 0 | 1 | | 1 | 1 | 1 | <br/><br/></p> <h2 id="nand-gate">NAND gate</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/dec/logic-gates/NAND-480.webp 480w,/assets/img/dec/logic-gates/NAND-800.webp 800w,/assets/img/dec/logic-gates/NAND-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/dec/logic-gates/NAND.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="NAND" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <strong>NAND</strong> gate has 2-inputs. It is basically a <strong>NOT</strong> gate connected to the output of an <strong>AND</strong> gate. When both of the inputs are set to 1 only then will the output result in 0.</p> <p>The Truth Table for a <strong>NAND</strong> gate is as follows:</p> <p>| Input A | Input B | Output X | | ——- | ——- | ——– | | 0 | 0 | 1 | | 0 | 1 | 1 | | 1 | 0 | 1 | | 1 | 1 | 0 | <br/><br/></p> <h2 id="nor-gate">NOR gate</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/dec/logic-gates/NOR-480.webp 480w,/assets/img/dec/logic-gates/NOR-800.webp 800w,/assets/img/dec/logic-gates/NOR-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/dec/logic-gates/NOR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="NOR" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <strong>NOR</strong> gate has 2-inputs. It is basically a <strong>NOT</strong> gate connected to the output of an <strong>OR</strong> gate. When both of the inputs are set to 0 only then will the output result in 1.</p> <p>The Truth Table for a <strong>NOR</strong> gate is as follows:</p> <p>| Input A | Input B | Output X | | ——- | ——- | ——– | | 0 | 0 | 1 | | 0 | 1 | 0 | | 1 | 0 | 0 | | 1 | 1 | 0 | <br/><br/></p> <h2 id="xor-gate">XOR gate</h2> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/dec/logic-gates/XOR-480.webp 480w,/assets/img/dec/logic-gates/XOR-800.webp 800w,/assets/img/dec/logic-gates/XOR-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/dec/logic-gates/XOR.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="XOR" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The <strong>XOR</strong> gate is sometimes also referred to as the “Exclusive OR gate”. It has 2-inputs and when both of the inputs have different values. only then will the output also result in 1.</p> <p>The Truth Table for an <strong>XOR</strong> gate is as follows:</p> <table> <thead> <tr> <th>Input A</th> <th>Input B</th> <th>Output X</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>1</td> </tr> <tr> <td>1</td> <td>0</td> <td>1</td> </tr> <tr> <td>1</td> <td>1</td> <td>0</td> </tr> </tbody> </table> <hr/> <h3 id="multi-input-logic-gates">Multi-Input Logic Gates</h3> <p>The Logic Gates <strong>AND, OR, NAND, NOR, XOR</strong> all have 2 inputs, but it is not uncommon to see these same logic gates with a different number of Inputs. This is because the circuit is arranged in a certain way that the form a “Tree-like” structure.</p> <p>For example, a 4-input <strong>AND</strong> gate is basically an <strong>AND</strong> which has each of it’s 2 inputs connected to the outputs of two other <strong>AND</strong> gates, effectively emulating as a single 4-input <strong>AND</strong> gate instead of a 4-input Logic Circuit.</p> <p>The Truth Table for such a circuit would be as follows:</p> <table> <thead> <tr> <th>Input A</th> <th>Input B</th> <th>Input C</th> <th>Input D</th> <th>(A <strong>AND</strong> B) E</th> <th>(C <strong>AND</strong> D) F</th> <th>Output X (E <strong>AND</strong> F)</th> </tr> </thead> <tbody> <tr> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>0</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>0</td> <td>1</td> <td>1</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> </tr> <tr> <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>0</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> </tr> <tr> <td>1</td> <td>1</td> <td>0</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>1</td> <td>0</td> <td>1</td> <td>1</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>1</td> <td>1</td> <td>0</td> <td>1</td> <td>0</td> <td>0</td> </tr> <tr> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> <td>1</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="Digital-Electronics-Course"/><category term="Electronics"/><summary type="html"><![CDATA[Lecture 1 of Digital Electronics Course]]></summary></entry><entry><title type="html">Introduction to Digital Electronics</title><link href="https://kinghowler.github.io/blog/2024/introduction-to-digital-electronics-course/" rel="alternate" type="text/html" title="Introduction to Digital Electronics"/><published>2024-08-23T00:00:00+00:00</published><updated>2024-08-23T00:00:00+00:00</updated><id>https://kinghowler.github.io/blog/2024/introduction-to-digital-electronics-course</id><content type="html" xml:base="https://kinghowler.github.io/blog/2024/introduction-to-digital-electronics-course/"><![CDATA[<style>th,td{border:1px solid black}</style> <p>Digital Electronics is a subset of both Physics and Computer Science, though it is also similar to Computer Engineering. Digital Electronics refers to the handling of logic circuits and other binary-based systems. In this course I will be teaching you the basics of Digital Electronics.</p> <p>A complete list of the topics which I will be covering are displayed below in a chronological order starting from the beginning to the end.</p> <hr/> <table> <thead> <tr> <th>Serial No.</th> <th>Topic</th> </tr> </thead> <tbody> <tr> <td>Lecture #1</td> <td>Basic Logic Gates and Truth Tables</td> </tr> <tr> <td>Lecture #2</td> <td>Logic States, pull-up &amp; pull-down</td> </tr> <tr> <td>Lecture #3</td> <td>Basic Electronics part 1</td> </tr> <tr> <td>Lecture #4</td> <td>Basic Electronics part 2</td> </tr> <tr> <td>Lecture #5</td> <td>Transistor Logic</td> </tr> <tr> <td>Lecture #6</td> <td>74XX IC series (Logic Gates)</td> </tr> <tr> <td>Experiment #1</td> <td>Automatic Night Light</td> </tr> <tr> <td>Lecture #7</td> <td>Binary, bits and bytes</td> </tr> <tr> <td>Lecture #8</td> <td>Half Adder &amp; Full Adder</td> </tr> <tr> <td>Lecture #9</td> <td>Binary Subtraction</td> </tr> <tr> <td>Lecture #10</td> <td>Latches</td> </tr> <tr> <td>Lecture #11</td> <td>SR Latch</td> </tr> <tr> <td>Lecture #12</td> <td>D Latch</td> </tr> <tr> <td>Lecture #13</td> <td>JK Latch</td> </tr> <tr> <td>Lecture #14</td> <td>74XX IC series (Latches)</td> </tr> <tr> <td>Experiment #2</td> <td>Laser Security System</td> </tr> <tr> <td>Lecture #15</td> <td>555 Timer IC (Astable mode)</td> </tr> <tr> <td>Lecture #16</td> <td>555 Timer IC (Monostable mode)</td> </tr> <tr> <td>Lecture #17</td> <td>555 Timer IC (Bistable mode)</td> </tr> <tr> <td>Experiment #3</td> <td>Strobe Lights</td> </tr> <tr> <td>Experiment #4</td> <td>Specific Time duration Outputs</td> </tr> <tr> <td>Experiment #5</td> <td>Delayed Outputs</td> </tr> <tr> <td>Lecture #18</td> <td>Ring Counters</td> </tr> <tr> <td>Experiment #6</td> <td>Traffic Lights</td> </tr> <tr> <td>Lecture #19</td> <td>7 Segment (single digit), 7447 IC &amp; BCD</td> </tr> <tr> <td>Lecture #20</td> <td>Column Switching and 7 Segment (multiple digits)</td> </tr> <tr> <td>Lecture #21</td> <td>Multiplexing</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="Digital-Electronics-Course"/><category term="Electronics"/><summary type="html"><![CDATA[Course outline]]></summary></entry></feed>